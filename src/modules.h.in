#ifndef MODULE_H
#define MODULE_H

#include <stdio.h>
#include "output.h"
#include "state.h"

#define FULL_OUTPUT @FULL_OUTPUT@

#if FULL_OUTPUT

#include "mod_meas.h"
#include "mod_hist.h"
#include "mod_corr.h"
#include "mod_corr_fft.h"
#include "mod_spinstate.h"

#define MODULES(_, ...) \
    _(meas, __VA_ARGS__) \
    _(hist, __VA_ARGS__) \
    _(corr_fft, __VA_ARGS__) \
    _(spinstate, __VA_ARGS__)
#else

#include "mod_meas.h"
#include "mod_hist.h"
#include "mod_corr.h"

#define MODULES(_, ...) \
    _(meas, __VA_ARGS__) \
    _(hist, __VA_ARGS__) \
    _(corr, __VA_ARGS__)

#endif
    
#define MODULE_DECLARE(name, dummy) mod_##name name;

#define MODULE_INIT(name, mods, files) \
    mod_##name##_init(&mods.name, files->name);

#define MODULE_RESET(name, mods) mod_##name##_reset(&mods.name);
#define MODULE_UPDATE(name, mods, s) mod_##name##_update(&mods.name, s);

#define MODULE_OUTPUT(name, mods, s, idx, num_updates, files) \
    mod_##name##_output(&mods.name, s, idx, num_updates, files->name);

#define MODULE_CLEANUP(name, mods) \
    mod_##name##_cleanup(&mods.name);

#define MODULE_INTERFACE(_, dummy) \
    void mod_##_##_init(mod_##_ *self, FILE *fp);\
    void mod_##_##_reset(mod_##_ *self);\
    void mod_##_##_update(mod_##_ *self, const state *s);\
    void mod_##_##_output(const mod_##_ *self,\
                          const state *s,\
                          const output_index *idx,\
                          int num_updates, \
                          FILE *fp); \
    void mod_##_##_cleanup(mod_##_ *self);

#define DECLARE_STRUCT_MEMBER(name, type) type name;

typedef struct { MODULES(MODULE_DECLARE) } modules;
typedef struct { MODULES(DECLARE_STRUCT_MEMBER, FILE *) } output_files;

MODULES(MODULE_INTERFACE)
#endif
